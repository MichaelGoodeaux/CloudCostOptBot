# image: python:3.9  # Base image for initial setup steps

# Pipeline configuration for caching, step definitions, and resources
# definitions:
#   caches:
#     pip: /root/.cache/pip  # Cache pip dependencies

#   services:
#     docker:
#       memory: 4096  # Set memory limit for Docker if needed

#   steps:
#     - step: &install-dependencies
#         name: Install Dependencies
#         caches:
#           - pip
#         script:
#           - pip install -r python/requirements.txt
#           - pip install -r python/requirements-dev.txt

#     - step: &bootstrap-project
#         name: Bootstrap Project
#         script:
#           # Run bootstrap script for initial project setup
#           - chmod +x ./bin/bootstrap.sh
#           - ./bin/bootstrap.sh

#     - step: &build-and-test
#         name: Build and Test
#         services:
#           - docker
#         caches:
#           - pip
#         script:
#           # Build the development Docker image
#           - chmod +x ./bin/build
#           - ./bin/build -t dev  # Use the development mode flag
          
#           # Run tests in the development container
#           - docker run --rm your_app_dev pytest tests/

#     - step: &lint-and-quality-check
#         name: Lint and Quality Check
#         script:
#           # Run flake8 in the development container
#           - docker run --rm your_app_dev flake8 python/ tests/

#     - step: &build-production-image
#         name: Build Production Image
#         services:
#           - docker
#         script:
#           # Build the production Docker image
#           - ./bin/build -t prod

#     - step: &deploy-to-aws
#         name: Deploy to AWS
#         image: amazon/aws-cli
#         deployment: production
#         script:
#           # Authenticate and push production Docker image to AWS ECR
#           - $(aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com)
#           - docker tag your_app_prod $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/your_app_prod:latest
#           - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/your_app_prod:latest

#     - step: &deploy-to-azure
#         name: Deploy to Azure
#         image: mcr.microsoft.com/azure-cli
#         deployment: production
#         script:
#           # Login to Azure and push Docker image to Azure Container Registry (ACR)
#           - az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
#           - az acr login --name $AZURE_REGISTRY_NAME
#           - docker tag your_app_prod $AZURE_REGISTRY_NAME.azurecr.io/your_app_prod:latest
#           - docker push $AZURE_REGISTRY_NAME.azurecr.io/your_app_prod:latest

#     - step: &deploy-to-gcp
#         name: Deploy to GCP
#         image: google/cloud-sdk
#         deployment: production
#         script:
#           # Authenticate and push Docker image to Google Container Registry (GCR)
#           - echo $GOOGLE_APPLICATION_CREDENTIALS_JSON | gcloud auth activate-service-account --key-file=-
#           - gcloud auth configure-docker
#           - docker tag your_app_prod gcr.io/$GCP_PROJECT_ID/your_app_prod:latest
#           - docker push gcr.io/$GCP_PROJECT_ID/your_app_prod:latest

# pipelines:
#   default:
#     - step: *install-dependencies
#     - step: *bootstrap-project
#     - step: *build-and-test
#     - step: *lint-and-quality-check
#     - step: *build-production-image
#     - step: *deploy-to-aws
#     - step: *deploy-to-azure
#     - step: *deploy-to-gcp
